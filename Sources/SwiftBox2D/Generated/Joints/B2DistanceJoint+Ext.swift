// HEADS UP!: Auto-generated file, changes made directly here will be overwritten by code generators.
// Generated by generate_types.py

import box2d

public extension B2DistanceJoint {
    /// Get the constraint force on a distance joint
    func getConstraintForce(_ timeStep: Float) -> Float {
        b2DistanceJoint_GetConstraintForce(id, timeStep)
    }
    
    /// Set the rest length of a distance joint
    func setLength(_ length: Float) {
        b2DistanceJoint_SetLength(id, length)
    }
    
    /// Get the rest length of a distance joint
    func getLength() -> Float {
        b2DistanceJoint_GetLength(id)
    }
    
    /// Enable/disable the distance joint spring. When disabled the distance joint is rigid.
    func enableSpring(_ enableSpring: Bool) {
        b2DistanceJoint_EnableSpring(id, enableSpring)
    }
    
    func isSpringEnabled() -> Bool {
        b2DistanceJoint_IsSpringEnabled(id)
    }
    
    /// Set the spring stiffness in Hertz
    func setSpringHertz(_ hertz: Float) {
        b2DistanceJoint_SetSpringHertz(id, hertz)
    }
    
    /// Set the spring damping ratio, non-dimensional
    func setSpringDampingRatio(_ dampingRatio: Float) {
        b2DistanceJoint_SetSpringDampingRatio(id, dampingRatio)
    }
    
    /// - returns: the spring Hertz
    func getHertz() -> Float {
        b2DistanceJoint_GetHertz(id)
    }
    
    /// - returns: the spring damping ratio
    func getDampingRatio() -> Float {
        b2DistanceJoint_GetDampingRatio(id)
    }
    
    /// Enable joint limit. The limit only works if the joint spring is enabled. Otherwise the joint is rigid
    /// and the limit has no effect.
    func enableLimit(_ enableLimit: Bool) {
        b2DistanceJoint_EnableLimit(id, enableLimit)
    }
    
    /// Set the minimum and maximum length parameters of a distance joint
    func setLengthRange(_ minLength: Float, _ maxLength: Float) {
        b2DistanceJoint_SetLengthRange(id, minLength, maxLength)
    }
    
    /// Get the minimum distance joint length
    func getMinLength() -> Float {
        b2DistanceJoint_GetMinLength(id)
    }
    
    /// Get the maximum distance joint length
    func getMaxLength() -> Float {
        b2DistanceJoint_GetMaxLength(id)
    }
    
    /// Get the current length of a distance joint
    func getCurrentLength() -> Float {
        b2DistanceJoint_GetCurrentLength(id)
    }
    
    func enableMotor(_ enableMotor: Bool) {
        b2DistanceJoint_EnableMotor(id, enableMotor)
    }
    
    func isMotorEnabled() -> Bool {
        b2DistanceJoint_IsMotorEnabled(id)
    }
    
    func setMotorSpeed(_ motorSpeed: Float) {
        b2DistanceJoint_SetMotorSpeed(id, motorSpeed)
    }
    
    func getMotorSpeed() -> Float {
        b2DistanceJoint_GetMotorSpeed(id)
    }
    
    func getMotorForce() -> Float {
        b2DistanceJoint_GetMotorForce(id)
    }
    
    func setMaxMotorForce(_ force: Float) {
        b2DistanceJoint_SetMaxMotorForce(id, force)
    }
    
    func getMaxMotorForce() -> Float {
        b2DistanceJoint_GetMaxMotorForce(id)
    }
}
