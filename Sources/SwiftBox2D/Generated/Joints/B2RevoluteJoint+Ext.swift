// HEADS UP!: Auto-generated file, changes made directly here will be overwritten by code generators.
// Generated by generate_types.py

import box2d

public extension B2RevoluteJoint {
    /// Enable/disable the revolute joint spring
    func enableSpring(_ enableSpring: Bool) {
        b2RevoluteJoint_EnableSpring(id, enableSpring)
    }
    
    /// It the revolute angular spring enabled?
    func isSpringEnabled() -> Bool {
        b2RevoluteJoint_IsSpringEnabled(id)
    }
    
    /// Get the revolute joint current angle in radians relative to the reference angle
    /// @see b2RevoluteJointDef::referenceAngle
    func getAngle() -> Float {
        b2RevoluteJoint_GetAngle(id)
    }
    
    /// Enable/disable the revolute joint limit
    func enableLimit(_ enableLimit: Bool) {
        b2RevoluteJoint_EnableLimit(id, enableLimit)
    }
    
    /// Is the revolute joint limit enabled?
    func isLimitEnabled() -> Bool {
        b2RevoluteJoint_IsLimitEnabled(id)
    }
    
    /// Get the revolute joint lower limit in radians
    func getLowerLimit() -> Float {
        b2RevoluteJoint_GetLowerLimit(id)
    }
    
    /// Get the revolute joint upper limit in radians
    func getUpperLimit() -> Float {
        b2RevoluteJoint_GetUpperLimit(id)
    }
    
    /// Set the revolute joint limits in radians. It is expected that lower <= upper
    /// and that -0.95 * B2_PI <= lower && upper <= -0.95 * B2_PI.
    func setLimits(_ lower: Float, _ upper: Float) {
        b2RevoluteJoint_SetLimits(id, lower, upper)
    }
    
    /// Enable/disable a revolute joint motor
    func enableMotor(_ enableMotor: Bool) {
        b2RevoluteJoint_EnableMotor(id, enableMotor)
    }
    
    /// Is the revolute joint motor enabled?
    func isMotorEnabled() -> Bool {
        b2RevoluteJoint_IsMotorEnabled(id)
    }
    
    /// Get the revolute joint current motor torque, usually in newton-meters
    func getMotorTorque() -> Float {
        b2RevoluteJoint_GetMotorTorque(id)
    }
    
    /// Get the revolute joint spring stiffness in Hertz
    /// Set the revolute joint spring stiffness in Hertz
    var springHertz: Float {
        get {
            b2RevoluteJoint_GetSpringHertz(id)
        }
        set(hertz) {
            b2RevoluteJoint_SetSpringHertz(id, hertz)
        }
    }
    
    /// Get the revolute joint spring damping ratio, non-dimensional
    /// Set the revolute joint spring damping ratio, non-dimensional
    var springDampingRatio: Float {
        get {
            b2RevoluteJoint_GetSpringDampingRatio(id)
        }
        set(dampingRatio) {
            b2RevoluteJoint_SetSpringDampingRatio(id, dampingRatio)
        }
    }
    
    /// Get the revolute joint motor speed in radians per second
    /// Set the revolute joint motor speed in radians per second
    var motorSpeed: Float {
        get {
            b2RevoluteJoint_GetMotorSpeed(id)
        }
        set(motorSpeed) {
            b2RevoluteJoint_SetMotorSpeed(id, motorSpeed)
        }
    }
    
    /// Get the revolute joint maximum motor torque, usually in newton-meters
    /// Set the revolute joint maximum motor torque, usually in newton-meters
    var maxMotorTorque: Float {
        get {
            b2RevoluteJoint_GetMaxMotorTorque(id)
        }
        set(torque) {
            b2RevoluteJoint_SetMaxMotorTorque(id, torque)
        }
    }
}
