{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$ref": "#/definitions/GeneratorConfig",
    "definitions": {
        "GeneratorConfig": {
            "type": "object",
            "description": "A definition file for a generate_types.py/type_generator.py script.",
            "additionalProperties": false,
            "properties": {
                "declarations": {
                    "$ref": "#/definitions/Declarations"
                },
                "docComments": {
                    "$ref": "#/definitions/DocComments"
                },
                "fileGeneration": {
                    "$ref": "#/definitions/FileGeneration"
                }
            },
            "required": [
                "declarations",
                "docComments",
                "fileGeneration"
            ],
            "title": "GeneratorConfig"
        },
        "Declarations": {
            "type": "object",
            "description": "Settings for detecting C declarations, and how to handle them.",
            "additionalProperties": false,
            "properties": {
                "prefixes": {
                    "type": "array",
                    "description": "List of prefixes for symbol names; a symbol must have a matching prefix in this list to be selected.",
                    "items": {
                        "type": "string"
                    }
                },
                "symbolCasing": {
                    "$ref": "#/definitions/SymbolCasingSettings"
                },
                "swiftSymbolFormatting": {
                    "$ref": "#/definitions/SwiftSymbolFormatting"
                },
                "autoProperty": {
                    "$ref": "#/definitions/AutoProperty"
                },
                "functionsToMethods": {
                    "type": "array",
                    "description": "List of method wrappers to apply to certain C functions.",
                    "items": {
                        "$ref": "#/definitions/FunctionsToMethod"
                    }
                },
                "conformances": {
                    "type": "array",
                    "description": "List of conformances to apply to certain C declarations.",
                    "items": {
                        "$ref": "#/definitions/Conformance"
                    }
                },
                "filters": {
                    "$ref": "#/definitions/Filters"
                }
            },
            "required": [
                "filters",
                "prefixes",
                "swiftSymbolFormatting",
                "symbolCasing"
            ],
            "title": "Declarations"
        },
        "Conformance": {
            "type": "object",
            "description": "Specifies C symbols to generate Swift protocol conformances to.",
            "additionalProperties": false,
            "properties": {
                "cName": {
                    "type": "string",
                    "description": "C symbol to generate conformances of. Should be the full C symbol name; case-sensitive."
                },
                "conformances": {
                    "type": "array",
                    "description": "A list of Swift protocols to generate conformances of. If 'Equatable', 'Hashable', or 'CustomStringConvertible', conformance code will be generated based on the declaration's type automatically alongside the type extension.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "cName",
                "conformances"
            ],
            "title": "Conformance"
        },
        "Filters": {
            "type": "object",
            "description": "Configures filters for selecting C definitions to generate Swift wrappers for. Only C symbols that match one or more filters are generated. If empty, no declarations from the corresponding symbol type are generated. Filters can be prefixed with '!' to generate a negative filter that rejects a symbol even if another filter of the same declaration type accepted it.",
            "additionalProperties": false,
            "properties": {
                "enums": {
                    "type": "array",
                    "description": "Filters C enum declarations before conformances are added with 'conformances'.",
                    "items": {
                        "$ref": "#/definitions/Regex"
                    }
                },
                "enumMembers": {
                    "type": "array",
                    "description": "Filters individual C enum cases to be generated. Enum itself must be matched with 'enums' before its cases can be generated.",
                    "items": {
                        "$ref": "#/definitions/Regex"
                    }
                },
                "structs": {
                    "type": "array",
                    "description": "Filters C struct declarations before conformances are added with 'conformances'.",
                    "items": {
                        "$ref": "#/definitions/Regex"
                    }
                },
                "methods": {
                    "type": "array",
                    "description": "Filters C function declarations before they are turned to methods with 'functionsToMethods'. Only filters the function name portion.",
                    "items": {
                        "$ref": "#/definitions/Regex"
                    }
                }
            },
            "required": [
                "enumMembers",
                "enums",
                "methods",
                "structs"
            ],
            "title": "Filters"
        },
        "AutoProperty": {
            "type": "boolean",
            "description": "Whether to automatically transform get/set pairs of functions in 'functionsToMethods' to properties."
        },
        "FunctionsToMethod": {
            "type": "object",
            "description": "Describes the intent to transform global C functions into method wrappers on extensions of a Swift.",
            "additionalProperties": false,
            "properties": {
                "cPrefix": {
                    "type": "string",
                    "description": "Prefix that a C function requires to trigger this method wrapper generator. The prefix itself is absent from the generated symbol, e.g. 'libObjectDoSomething' with cPrefix 'libObject' maps to a method named 'doSomething'."
                },
                "swiftType": {
                    "type": "string",
                    "description": "The name of the Swift type to extend when adding matching methods. Should be created outside the generated files in order to be extended by the generated files as an 'extension' declaration."
                },
                "param0": {
                    "type": "object",
                    "description": "A filter for matching the first parameter of a C global function in order to generate a method wrapper.",
                    "additionalProperties": false,
                    "properties": {
                        "swiftName": {
                            "type": "string",
                            "description": "The name of the Swift symbol to use as the first argument when calling the C function. Should be visible to the extension as either a member of 'swiftType' or a global declaration."
                        },
                        "type": {
                            "type": "string",
                            "description": "The expected type of the parameter. If the C parameter is not equivalent to this type name, the method wrapper is not generated."
                        }
                    },
                    "required": [
                        "swiftName",
                        "type"
                    ],
                    "title": "Param0"
                }
            },
            "required": [
                "cPrefix",
                "param0",
                "swiftType"
            ],
            "title": "FunctionsToMethod"
        },
        "SwiftSymbolFormatting": {
            "type": "object",
            "description": "Specifies formatting for generated Swift declarations.", 
            "additionalProperties": false,
            "properties": {
                "symbolCasing": {
                    "$ref": "#/definitions/SymbolCasingSettings"
                },
                "capitalizeTerms": {
                    "type": "array",
                    "description": "A list of terms to always capitalized, e.g. 'AABB' capitalizes 'boxaabb' as 'boxAABB'. May also be a regex ('/pattern/') with exactly one capture group, to be used when matching a capitalization requires context, e.g. '/rect(f)/' capitalizes 'boundsRectf' as 'boundsRectF'.",
                    "items": {
                        "$ref": "#/definitions/NameOrRegex"
                    }
                },
                "patternsToSplit": {
                    "type": "array",
                    "description": "A list of regex strings, each with at least two capture groups, that will be used to split components that are read as a single word, e.g. '(two)(worded)' splits 'declTWOWORDED' into 'declTwoWorded'. Applied recursively: exercise caution against infinite recursions.",
                    "items": {
                        "$ref": "#/definitions/Regex"
                    }
                },
                "snakeCaseAfterTerms": {
                    "type": "array",
                    "description": "A list of terms that force a snake case split in a declaration name, e.g. 'sse2' splits 'x86Sse2' into 'x86_sse2'.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "capitalizeTerms",
                "patternsToSplit",
                "snakeCaseAfterTerms",
                "symbolCasing"
            ],
            "title": "SwiftSymbolFormatting"
        },
        "SymbolCasing": {
            "type": "string",
            "description": "Specifies a type of casing to use when parsing/generating symbols.",
            "title": "SymbolCasing",
            "enum": ["camelCase", "PascalCase", "snake_case", "UPPER_SNAKE_CASE", "mixed_Case"]
        },
        "SymbolCasingSettings": {
            "type": "object",
            "description": "Specifies expected casing style of C declarations.",
            "additionalProperties": false,
            "properties": {
                "enums": {
                    "$ref": "#/definitions/SymbolCasing"
                },
                "enumMembers": {
                    "$ref": "#/definitions/SymbolCasing"
                },
                "structs": {
                    "$ref": "#/definitions/SymbolCasing"
                },
                "functions": {
                    "$ref": "#/definitions/SymbolCasing"
                }
            },
            "required": [
                "enumMembers",
                "enums",
                "functions",
                "structs"
            ],
            "title": "SymbolCasingSettings"
        },
        "DocComments": {
            "type": "object",
            "description": "Settings for copying/formatting doc comments from C symbols to generated Swift symbols.",
            "additionalProperties": false,
            "properties": {
                "collect": {
                    "type": "boolean",
                    "description": "Whether to collect doc comments."
                },
                "format": {
                    "type": "boolean",
                    "description": "Whether to attempt to format doc comments to a more agreeable SwiftDoc syntax wherever possible."
                }
            },
            "required": [
                "collect",
                "format"
            ],
            "title": "DocComments"
        },
        "FileGeneration": {
            "type": "object",
            "description": "Settings for generating Swift files.",
            "additionalProperties": false,
            "properties": {
                "targetPath": {
                    "type": "string",
                    "description": "Base path to generate the Swift files to. Based on the current CWD path."
                },
                "globalFileSuffix": {
                    "type": "string",
                    "description": "A global file suffix to append to all generated files, before extensions. Leave empty to not append anything to file names."
                },
                "imports": {
                    "type": "array",
                    "description": "List of modules to import at the top of all generated Swift files.",
                    "items": {
                        "type": "string",
                        "description": "A module to import at the top of every generated Swift file."
                    }
                },
                "directoryStructure": {
                    "type": "array",
                    "description": "Optional settings for generating complex directory structures from multi-file generation setups.",
                    "items": {
                        "type": "object",
                        "title": "DirectoryStructureEntry",
                        "description": "A pair of path/file-name-matchers to organize files with. Files matched by 'match' will be placed on the deepest level of 'path' across all directory structure entries found.",
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "A path relative to 'targetPath' that matched files will be placed on."
                            },
                            "match": {
                                "type": "array",
                                "description": "One or more filename/regex patterns that will be tested against files to place in this folder. Pattern is applied to full file-name with extension (including 'globalFileSuffix', if present), and no directory information. Reminder: files are generated 1-to-1 to each type that was extended during generation.",
                                "items": {
                                    "$ref": "#/definitions/NameOrRegex"
                                },
                                "minItems": 1
                            }
                        },
                        "required": [
                            "path",
                            "match"
                        ]
                    }
                }
            },
            "required": [
                "globalFileSuffix",
                "imports",
                "targetPath"
            ],
            "title": "FileGeneration"
        },
        "NameOrRegex": {
            "type": "string",
            "description": "Either a raw string or a regex enclosed by '/' (i.e. '/regex/'). In case the property that uses this type supports it, prepending the string with '!' inverts the match result."
        },
        "Regex": {
            "type": "string",
            "format": "regex",
            "description": "A regex string."
        }
    }
}
