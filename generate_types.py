# Requires Python 3.10

import argparse
import re
import sys

from pathlib import Path
from typing import Iterable

from utils.cli.cli_printing import print_stage_name
from utils.cli.console_color import ConsoleColor
from utils.data.generator_config import GeneratorConfig
from utils.data.swift_decl_lookup import SwiftDeclLookup
from utils.data.swift_decls import (
    SwiftDecl,
)
from utils.data.swift_file import SwiftFile
from utils.directory_structure.directory_structure_manager import (
    DirectoryStructureManager,
)
from utils.doccomment.doccomment_block import DoccommentBlock
from utils.doccomment.doccomment_formatter import DoccommentFormatter

from utils.generator.type_generator import (
    DeclGeneratorTarget,
    DeclFileGeneratorStdoutTarget,
    DeclFileGeneratorDiskTarget,
    TypeGeneratorRequest,
    generate_types,
)
from utils.paths import paths


# MARK: Config

FILE_NAME = "box2d.h"


class Box2DDoccommentFormatter(DoccommentFormatter):
    """
    Formats doc comments from Box2D to be more Swifty, including renaming \
    referenced C symbol names to the converted Swift names.
    """

    def __init__(self):
        self.ref_regex = re.compile(r"\\ref (\w+(?:\(\))?)", re.IGNORECASE)
        self.backtick_regex = re.compile(r"`([^`]+)`")
        self.backtick_word_regex = re.compile(r"\w+")
        self.backtick_cpp_member_regex = re.compile(r"(\w+)::(\w+)")

    def replace_refs(self, string: str) -> str:
        return self.ref_regex.sub(
            lambda match: f"`{''.join(match.groups())}`",
            string,
        )

    def convert_refs(self, string: str, lookup: SwiftDeclLookup) -> str:
        def convert_word_match(match: re.Match[str]) -> str:
            name = match.group()
            swift_name = lookup.lookup_c_symbol(name)
            if swift_name is not None:
                return swift_name

            return name

        def convert_backtick_match(match: re.Match[str]) -> str:
            replaced = self.backtick_word_regex.sub(
                convert_word_match,
                match.group(),
            )
            # Perform C++ symbol rewriting (Type::member)
            replaced = self.backtick_cpp_member_regex.sub(
                lambda m: f"{m.group(1)}.{m.group(2)}",
                replaced
            )
            
            return replaced

        return self.backtick_regex.sub(convert_backtick_match, string)

    def format_doccomment(
        self, comment: DoccommentBlock | None, decl: SwiftDecl, lookup: SwiftDeclLookup
    ) -> DoccommentBlock | None:
        if comment is None:
            return super().format_doccomment(comment, decl, lookup)
        
        lines = comment.lines()

        # Remove '\ingroup*' lines
        lines = filter(lambda c: not c.startswith("\\ingroup"), lines)

        # Reword '\note' to '- note'
        lines = map(lambda c: c.replace("\\note", "- note:"), lines)
        # Replace "\ref <symbol>" with "`<symbol>`"
        lines = map(self.replace_refs, lines)
        # Convert C symbol references to Swift symbols
        lines = map(lambda c: self.convert_refs(c, lookup), lines)

        return super().format_doccomment(comment.with_lines(lines), decl, lookup)


class Box2DDirectoryStructureManager(DirectoryStructureManager):
    def make_declaration_files(self, decls: Iterable[SwiftDecl]) -> list[SwiftFile]:
        result = super().make_declaration_files(decls)
        for file in result:
            file.header_lines.append(
                f"// Generated by {Path(__file__).relative_to(paths.SOURCE_ROOT_PATH)}"
            )

        return result


def main() -> int:
    parser = argparse.ArgumentParser(
        description="Generates .swift files for Box2D enum and struct declarations."
    )

    parser.add_argument(
        "-c",
        "--config_file",
        type=Path,
        default=Path("generate_types.json"),
        help="""
        Path to JSON file containing the configuration for the type generation.
        If not provided, defaults to 'generate_types.json'.
        """
    )
    parser.add_argument(
        "--stdout",
        action="store_true",
        help="Outputs files to stdout instead of file disk.",
    )
    parser.add_argument(
        "-o",
        "--output",
        dest="path",
        type=Path,
        help="Path to put generated files on",
    )

    args = parser.parse_args()

    input_path = paths.scripts_path(FILE_NAME)
    if not input_path.exists() or not input_path.is_file():
        print("Error: Expected path to an existing header file within utils/.")
        return 1

    swift_target_path = (
        args.path
        if args.path is not None
        else paths.srcroot_path("Sources", "SwiftBox2D", "Generated")
    )
    if not swift_target_path.exists() or not swift_target_path.is_dir():
        print(f"Error: No target directory with name '{swift_target_path}' found.")
        return 1

    destination_path = swift_target_path
    
    config = GeneratorConfig.from_json_file(args.config_file)

    target: DeclGeneratorTarget

    if args.stdout:
        target = DeclFileGeneratorStdoutTarget()
    else:
        target = DeclFileGeneratorDiskTarget(destination_path, rm_folder=True)

    print_stage_name(f"Loaded config from {ConsoleColor.CYAN(args.config_file)}")

    request = TypeGeneratorRequest.from_config(
        config=config,
        header_file=input_path,
        target=target,
        doccomment_formatter=Box2DDoccommentFormatter(),
        directory_manager=Box2DDirectoryStructureManager.from_config(config.fileGeneration),
    )

    generate_types(request)


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(1)
