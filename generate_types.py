# Requires Python 3.10

import argparse
import sys

from pathlib import Path

from utils.cli.cli_printing import print_stage_name
from utils.cli.console_color import ConsoleColor
from utils.data.generator_config import GeneratorConfig

from utils.generator.type_generator import (
    DeclGeneratorTarget,
    DeclFileGeneratorStdoutTarget,
    DeclFileGeneratorDiskTarget,
    TypeGeneratorRequest,
    generate_types,
)
from utils.paths import paths


# MARK: Config

FILE_NAME = "box2d.h"


def main() -> int:
    parser = argparse.ArgumentParser(
        description="Generates .swift files for Box2D enum and struct declarations."
    )

    parser.add_argument(
        "-c",
        "--config_file",
        type=Path,
        default=Path("generate_types.json"),
        help="""
        Path to JSON file containing the configuration for the type generation.
        If not provided, defaults to 'generate_types.json'.
        """
    )
    parser.add_argument(
        "--stdout",
        action="store_true",
        help="Outputs files to stdout instead of file disk.",
    )
    parser.add_argument(
        "-o",
        "--output",
        dest="path",
        type=Path,
        help="Path to put generated files on",
    )

    args = parser.parse_args()

    input_path = paths.scripts_path(FILE_NAME)
    if not input_path.exists() or not input_path.is_file():
        print("Error: Expected path to an existing header file within utils/.")
        return 1

    swift_target_path = (
        args.path
        if args.path is not None
        else paths.srcroot_path("Sources", "SwiftBox2D", "Generated")
    )
    if not swift_target_path.exists() or not swift_target_path.is_dir():
        print(f"Error: No target directory with name '{swift_target_path}' found.")
        return 1

    destination_path = swift_target_path
    
    config = GeneratorConfig.from_json_file(args.config_file)

    target: DeclGeneratorTarget

    if args.stdout:
        target = DeclFileGeneratorStdoutTarget()
    else:
        target = DeclFileGeneratorDiskTarget(destination_path, rm_folder=True)

    print_stage_name(f"Loaded config from {ConsoleColor.CYAN(args.config_file)}")

    request = TypeGeneratorRequest.from_config(
        config=config,
        header_file=input_path,
        target=target,
        file_header=f"// Generated by {Path(__file__).relative_to(paths.SOURCE_ROOT_PATH)}",
    )

    generate_types(request)


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(1)
